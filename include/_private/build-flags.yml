
#####################################################
#                  Compiler flags                   #
#####################################################

# C/C++ compiler flags used everywhere (including bootstrapping)
#
debug_flags: "-g"
common_flags: "-O2 %{debug_flags} -pipe"

# C/C++ compiler flags used in bootstrapping
#
build_common_flags: ""

# Element specific C/C++ flags used in bootstrapping
#
local_build_flags: ""

# Architecture specific C/C++ flags used in bootstrapping
#
build_x86_64_flags: ""
build_i686_flags: ""
build_aarch64_flags: ""
build_arm_flags: ""
build_ppc64le_flags: ""

# The final composition of `build_flags` includes `build_arch_flags`
# which can be one of the preset arch specific definitions above
#
# build_arch_flags: ""
#
build_flags: |

  %{common_flags} %{build_common_flags} %{build_arch_flags} %{local_build_flags}


# Feature specific flags enabled in regular builds.
#
# To disable, these flags can be cleared on a per element basis
#
target_flags_fortify_source: "-Wp,-D_FORTIFY_SOURCE=2"
target_flags_glibcxx_assertions: "-Wp,-D_GLIBCXX_ASSERTIONS"
target_flags_exceptions: "-fexceptions"
target_flags_stack_protector_strong: "-fstack-protector-strong"
target_flags_record_gcc_switches: "-grecord-gcc-switches"

# Default set of C/C++ compiler flags
target_common_flags: |

  %{target_flags_fortify_source} %{target_flags_glibcxx_assertions} %{target_flags_exceptions} %{target_flags_stack_protector_strong} %{target_flags_record_gcc_switches}

# Element specific C/C++ flags
#
local_flags: ""

# Architecture specific C/C++ compiler flags
#
target_x86_64_flags: "-fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection"
# -mstackrealign is to  a potential but unlikely bug introduced
# by the change of the Linux i386 ABI a long time ago. Stack used to be
# 4-bytes aligned, now it is 16-bytes aligned for SSE. Not available
# by default. So it is passed in flags.
# See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=40838
target_i686_flags: "-mstackrealign -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection"
target_aarch64_flags: "-fasynchronous-unwind-tables -fstack-clash-protection"
target_arm_flags: ""
target_ppc64le_flags: "-fasynchronous-unwind-tables -fstack-clash-protection"

# The final composition of `target_flags` includes `target_arch_flags`
# which can be one of the preset arch specific definitions above
#
# target_arch_flags: ""
#
target_flags: "%{common_flags} %{target_common_flags} %{target_arch_flags} %{local_flags}"


#####################################################
#                    Linker flags                   #
#####################################################

# Common linker flags used everywhere
common_ldflags: "-Wl,-z,relro,-z,now -Wl,--as-needed"

# Element specific linker flags
local_ldflags: ""

# Final linker flags set in LDFLAGS
ldflags_defaults: "%{common_ldflags} %{local_ldflags}"
