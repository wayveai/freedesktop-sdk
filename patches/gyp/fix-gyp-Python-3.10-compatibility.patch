From ca69261603b4a813dc5613c4f8ba7aed7efb6df3 Mon Sep 17 00:00:00 2001
From: Seppo Yli-Olli <seppo.yliolli@gmail.com>
Date: Sun, 16 Jan 2022 17:04:14 +0200
Subject: [PATCH] Fix gyp Python 3.10 compatibility


diff --git a/pylib/gyp/common.py b/pylib/gyp/common.py
index b268d229..c80d985a 100644
--- a/pylib/gyp/common.py
+++ b/pylib/gyp/common.py
@@ -4,7 +4,7 @@
 
 from __future__ import with_statement
 
-import collections
+import collections.abc
 import errno
 import filecmp
 import os.path
@@ -494,7 +494,7 @@ def uniquer(seq, idfun=None):
 
 
 # Based on http://code.activestate.com/recipes/576694/.
-class OrderedSet(collections.MutableSet):
+class OrderedSet(collections.abc.MutableSet):
   def __init__(self, iterable=None):
     self.end = end = []
     end += [None, end, end]         # sentinel node for doubly linked list
diff --git a/pylib/gyp/msvs_emulation.py b/pylib/gyp/msvs_emulation.py
index 63d40e63..bcfb7f76 100644
--- a/pylib/gyp/msvs_emulation.py
+++ b/pylib/gyp/msvs_emulation.py
@@ -7,7 +7,7 @@ This module helps emulate Visual Studio 2008 behavior on top of other
 build systems, primarily ninja.
 """
 
-import collections
+import collections.abc
 import os
 import re
 import subprocess
@@ -91,7 +91,7 @@ def _AddPrefix(element, prefix):
   """Add |prefix| to |element| or each subelement if element is iterable."""
   if element is None:
     return element
-  if (isinstance(element, collections.Iterable) and
+  if (isinstance(element, collections.abc.Iterable) and
       not isinstance(element, basestring)):
     return [prefix + e for e in element]
   else:
@@ -104,7 +104,7 @@ def _DoRemapping(element, map):
   if map is not None and element is not None:
     if not callable(map):
       map = map.get # Assume it's a dict, otherwise a callable to do the remap.
-    if (isinstance(element, collections.Iterable) and
+    if (isinstance(element, collections.abc.Iterable) and
         not isinstance(element, basestring)):
       element = filter(None, [map(elem) for elem in element])
     else:
@@ -117,7 +117,7 @@ def _AppendOrReturn(append, element):
   then add |element| to it, adding each item in |element| if it's a list or
   tuple."""
   if append is not None and element is not None:
-    if (isinstance(element, collections.Iterable) and
+    if (isinstance(element, collections.abc.Iterable) and
         not isinstance(element, basestring)):
       append.extend(element)
     else:
-- 
2.33.1

