From 4aa8971c61f712761e98fba8047789c935301518 Mon Sep 17 00:00:00 2001
From: Green Wan <green.wan@sifive.com>
Date: Mon, 18 Jan 2021 07:08:07 -0800
Subject: [PATCH 2/3] lib: utils: add gpio generic interface

Add generic interface for GPIO driver and add SiFive GPIO
driver as an example. Currently, driver supports gpio output
function only.

lib/utils/gpio/fdt_gpio.c:
  - contains GPIO generic interfaces.

lib/utils/gpio/sifive_gpio.c:
  - contains sifive GPIO driver.

Signed-off-by: Green Wan <green.wan@sifive.com>
---
 include/sbi/sbi_gpio.h            | 23 +++++++++++
 include/sbi_utils/gpio/fdt_gpio.h | 32 ++++++++++++++++
 lib/utils/gpio/fdt_gpio.c         | 54 ++++++++++++++++++++++++++
 lib/utils/gpio/objects.mk         | 11 ++++++
 lib/utils/gpio/sifive_gpio.c      | 64 +++++++++++++++++++++++++++++++
 platform/generic/objects.mk       |  1 +
 platform/generic/platform.c       |  5 +++
 platform/generic/sifive_fu740.c   | 36 +++++++++++++++++
 8 files changed, 226 insertions(+)
 create mode 100644 include/sbi/sbi_gpio.h
 create mode 100644 include/sbi_utils/gpio/fdt_gpio.h
 create mode 100644 lib/utils/gpio/fdt_gpio.c
 create mode 100644 lib/utils/gpio/objects.mk
 create mode 100644 lib/utils/gpio/sifive_gpio.c
 create mode 100644 platform/generic/sifive_fu740.c

diff --git a/include/sbi/sbi_gpio.h b/include/sbi/sbi_gpio.h
new file mode 100644
index 0000000..67ef9a9
--- /dev/null
+++ b/include/sbi/sbi_gpio.h
@@ -0,0 +1,23 @@
+/*
+ * SPDX-License-Identifier: GPL 2.0+
+ *
+ * Copyright (c) 2021 SiFive.
+ *
+ * Authors:
+ *   Green Wan <green.wan@sifive.com>
+ */
+
+#ifndef __SBI_GPIO_H__
+#define __SBI_GPIO_H__
+
+#include <sbi/sbi_types.h>
+
+struct sbi_scratch;
+
+/* Initialize gpio */
+int sbi_gpio_init(struct sbi_scratch *scratch, bool cold_boot);
+
+/* Exit gpio */
+void sbi_gpio_exit(struct sbi_scratch *scratch);
+
+#endif
diff --git a/include/sbi_utils/gpio/fdt_gpio.h b/include/sbi_utils/gpio/fdt_gpio.h
new file mode 100644
index 0000000..e236281
--- /dev/null
+++ b/include/sbi_utils/gpio/fdt_gpio.h
@@ -0,0 +1,32 @@
+/*
+ * SPDX-License-Identifier: GPL 2.0+
+ *
+ * Copyright (c) 2021 SiFive Inc.
+ *
+ * Authors:
+ *   Green Wan <green.wan@sifive.com>
+ */
+
+#ifndef __FDT_GPIO_H__
+#define __FDT_GPIO_H__
+
+#include <sbi/sbi_types.h>
+
+/**
+ * Make a GPIO an output, and set its value.
+ *
+ * @param gpio  GPIO number
+ * @param value GPIO value (0 for low or 1 for high)
+ * @return 0 if ok, -1 on error
+ */
+int gpio_direction_output(unsigned gpio, int value);
+
+struct fdt_gpio {
+	const struct fdt_match *match_table;
+	int (*init)(void *fdt, int nodeoff, const struct fdt_match *match);
+	int (*direction_output)(unsigned int gpio, int value);
+};
+
+int fdt_gpio_init(void);
+
+#endif
diff --git a/lib/utils/gpio/fdt_gpio.c b/lib/utils/gpio/fdt_gpio.c
new file mode 100644
index 0000000..0694f94
--- /dev/null
+++ b/lib/utils/gpio/fdt_gpio.c
@@ -0,0 +1,54 @@
+/*
+ * SPDX-License-Identifier: GPL 2.0+
+ *
+ * Copyright (c) 2021 SiFive
+ *
+ * Authors:
+ *   Green Wan <green.wan@sifive.com>
+ */
+
+#include <sbi/sbi_scratch.h>
+#include <sbi/sbi_console.h>
+#include <sbi_utils/fdt/fdt_helper.h>
+#include <sbi_utils/gpio/fdt_gpio.h>
+
+extern struct fdt_gpio sifive_gpio;
+
+static struct fdt_gpio *gpio_drivers[] = {
+	&sifive_gpio
+};
+
+static struct fdt_gpio *current_driver = NULL;
+
+int gpio_direction_output(unsigned gpio, int value)
+{
+	if (current_driver->direction_output)
+		return current_driver->direction_output(gpio, value);
+
+	return 0;
+}
+
+int fdt_gpio_init(void)
+{
+	int pos, noff, rc;
+	struct fdt_gpio *drv;
+	const struct fdt_match *match;
+	void *fdt = sbi_scratch_thishart_arg1_ptr();
+
+	for (pos = 0; pos < array_size(gpio_drivers); pos++) {
+		drv = gpio_drivers[pos];
+
+		noff = -1;
+		while ((noff = fdt_find_match(fdt, noff,
+					drv->match_table, &match)) >= 0) {
+			if (drv->init) {
+				rc = drv->init(fdt, noff, match);
+				if (rc)
+					return rc;
+			}
+			current_driver = drv;
+		}
+	}
+
+	return 0;
+}
diff --git a/lib/utils/gpio/objects.mk b/lib/utils/gpio/objects.mk
new file mode 100644
index 0000000..727c567
--- /dev/null
+++ b/lib/utils/gpio/objects.mk
@@ -0,0 +1,11 @@
+#
+# SPDX-License-Identifier: GPL 2.0+
+#
+# Copyright (c) 2020 SiFive Inc.
+#
+# Authors:
+#   Green Wan <green.wan@sifive.com>
+#
+
+libsbiutils-objs-y += gpio/fdt_gpio.o
+libsbiutils-objs-y += gpio/sifive_gpio.o
diff --git a/lib/utils/gpio/sifive_gpio.c b/lib/utils/gpio/sifive_gpio.c
new file mode 100644
index 0000000..d380c02
--- /dev/null
+++ b/lib/utils/gpio/sifive_gpio.c
@@ -0,0 +1,64 @@
+/*
+ * SPDX-License-Identifier: GPL 2.0+
+ *
+ * Copyright (c) 2021 SiFive Inc.
+ *
+ * Authors:
+ *   Green Wan <green.wan@sifive.com>
+ */
+
+#include <sbi/riscv_io.h>
+#include <sbi/sbi_error.h>
+#include <sbi/sbi_console.h>
+#include <sbi_utils/fdt/fdt_helper.h>
+#include <sbi_utils/gpio/fdt_gpio.h>
+#include <sbi_utils/sys/clint.h>
+
+#define GPIO_OUTEN				0x8
+#define GPIO_OUTVAL				0xC
+#define GPIO_BIT(b)				(1UL << (b))
+
+static struct platform_gpio_data gpio_data = {
+	.addr = 0x0
+};
+
+static int sifive_gpio_init(void *fdt, int nodeoff,
+				  const struct fdt_match *match)
+{
+	int rc;
+
+	rc = fdt_parse_gpio_node(fdt, nodeoff, &gpio_data);
+	if (rc)
+		return rc;
+
+	return 0;
+}
+
+static int sifive_gpio_direction_output(unsigned int gpio, int value)
+{
+	if (gpio_data.addr != 0) {
+		unsigned int val;
+
+		val = readl((volatile void *)(gpio_data.addr + GPIO_OUTEN));
+		val |= GPIO_BIT(gpio);
+		writel(val, (volatile void *)(gpio_data.addr + GPIO_OUTEN));
+
+		val = readl((volatile void *)(gpio_data.addr + GPIO_OUTEN));
+		val &= ~GPIO_BIT(gpio);
+		writel(val, (volatile void *)(gpio_data.addr + GPIO_OUTVAL));
+
+		return 0;
+	}
+
+	return SBI_EINVAL;
+}
+static const struct fdt_match sifive_gpio_match[] = {
+	{ .compatible = "sifive,gpio0" },
+	{ },
+};
+
+struct fdt_gpio sifive_gpio = {
+	.match_table = sifive_gpio_match,
+	.init = sifive_gpio_init,
+	.direction_output = sifive_gpio_direction_output,
+};
diff --git a/platform/generic/objects.mk b/platform/generic/objects.mk
index d6c8a42..cb15a18 100644
--- a/platform/generic/objects.mk
+++ b/platform/generic/objects.mk
@@ -9,3 +9,4 @@
 
 platform-objs-y += platform.o
 platform-objs-y += sifive_fu540.o
+platform-objs-y += sifive_fu740.o
diff --git a/platform/generic/platform.c b/platform/generic/platform.c
index 8c1e06f..0b79307 100644
--- a/platform/generic/platform.c
+++ b/platform/generic/platform.c
@@ -19,13 +19,16 @@
 #include <sbi_utils/irqchip/fdt_irqchip.h>
 #include <sbi_utils/serial/fdt_serial.h>
 #include <sbi_utils/timer/fdt_timer.h>
+#include <sbi_utils/gpio/fdt_gpio.h>
 #include <sbi_utils/ipi/fdt_ipi.h>
 #include <sbi_utils/reset/fdt_reset.h>
 
 extern const struct platform_override sifive_fu540;
+extern const struct platform_override sifive_fu740;
 
 static const struct platform_override *special_platforms[] = {
 	&sifive_fu540,
+	&sifive_fu740,
 };
 
 static const struct platform_override *generic_plat = NULL;
@@ -128,6 +131,8 @@ static int generic_early_init(bool cold_boot)
 	if (!cold_boot)
 		return 0;
 
+	fdt_gpio_init();
+
 	return fdt_reset_init();
 }
 
diff --git a/platform/generic/sifive_fu740.c b/platform/generic/sifive_fu740.c
new file mode 100644
index 0000000..c8325d3
--- /dev/null
+++ b/platform/generic/sifive_fu740.c
@@ -0,0 +1,36 @@
+/*
+ * SPDX-License-Identifier: BSD-2-Clause
+ *
+ * Copyright (c) 2021 SiFive
+ *
+ * Authors:
+ *   David Abdurachmanov <david.abdurachmanov@sifive.com>
+ */
+
+#include <platform_override.h>
+#include <sbi_utils/fdt/fdt_helper.h>
+#include <sbi_utils/fdt/fdt_fixup.h>
+
+static u64 sifive_fu740_tlbr_flush_limit(const struct fdt_match *match)
+{
+	/*
+	 * Needed to address CIP-1200 errata on SiFive FU740
+	 * Title: Instruction TLB can fail to respect a non-global SFENCE
+	 * Workaround: Flush the TLB using SFENCE.VMA x0, x0
+	 * See Errata_FU740-C000_20210205 from
+	 * https://www.sifive.com/boards/hifive-unmatched
+	 */
+	return 0;
+}
+
+static const struct fdt_match sifive_fu740_match[] = {
+	{ .compatible = "sifive,fu740" },
+	{ .compatible = "sifive,fu740-c000" },
+	{ .compatible = "sifive,hifive-unmatched-a00" },
+	{ },
+};
+
+const struct platform_override sifive_fu740 = {
+	.match_table = sifive_fu740_match,
+	.tlbr_flush_limit = sifive_fu740_tlbr_flush_limit,
+};
-- 
2.30.2

