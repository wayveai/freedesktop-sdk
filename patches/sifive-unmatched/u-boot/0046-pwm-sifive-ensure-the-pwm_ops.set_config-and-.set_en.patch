From d9d5cb4bcbd1b45183b514c324e91c8c3f11b1c8 Mon Sep 17 00:00:00 2001
From: Vincent Chen <vincent.chen@sifive.com>
Date: Mon, 29 Mar 2021 14:48:11 +0800
Subject: [PATCH 46/50] pwm: sifive: ensure the pwm_ops.set_config and
 .set_enable work properly

Currently, pwm_sifive_set_config() and pwm_sifive_set_enable() cannot
work properly in some cases. This patch resolves the issues so that
these two functions can work in all situations.

Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
---
 drivers/pwm/pwm-sifive.c | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/pwm/pwm-sifive.c b/drivers/pwm/pwm-sifive.c
index 01212d630a..1b5bb96a08 100644
--- a/drivers/pwm/pwm-sifive.c
+++ b/drivers/pwm/pwm-sifive.c
@@ -8,7 +8,6 @@
  * - When changing both duty cycle and period, we cannot prevent in
  *   software that the output might produce a period with mixed
  *   settings (new period length and old duty cycle).
- * - The hardware cannot generate a 100% duty cycle.
  * - The hardware generates only inverted output.
  */
 
@@ -38,6 +37,9 @@
 #define PWM_SIFIVE_SIZE_PWMCMP          4
 #define PWM_SIFIVE_CMPWIDTH             16
 
+#define PWM_SIFIVE_CHANNEL_ENABLE_VAL	0
+#define PWM_SIFIVE_CHANNEL_DISABLE_VAL	0xffff
+
 DECLARE_GLOBAL_DATA_PTR;
 
 struct pwm_sifive_regs {
@@ -77,7 +79,7 @@ static int pwm_sifive_set_config(struct udevice *dev, uint channel,
 	 */
 	scale_pow = lldiv((uint64_t)priv->freq * period_ns, 1000000000);
 	scale = clamp(ilog2(scale_pow) - PWM_SIFIVE_CMPWIDTH, 0, 0xf);
-	val |= FIELD_PREP(PWM_SIFIVE_PWMCFG_SCALE, scale);
+	val |= (FIELD_PREP(PWM_SIFIVE_PWMCFG_SCALE, scale) | PWM_SIFIVE_PWMCFG_EN_ALWAYS);
 
 	/*
 	 * The problem of output producing mixed setting as mentioned at top,
@@ -88,6 +90,7 @@ static int pwm_sifive_set_config(struct udevice *dev, uint channel,
 	num = (u64)duty_ns * (1U << PWM_SIFIVE_CMPWIDTH);
 	frac = DIV_ROUND_CLOSEST_ULL(num, period_ns);
 	frac = min(frac, (1U << PWM_SIFIVE_CMPWIDTH) - 1);
+	frac = (1U << PWM_SIFIVE_CMPWIDTH) - 1 - frac;
 
 	writel(val, priv->base + regs->cfg);
 	writel(frac, priv->base + regs->cmp0 + channel *
@@ -100,18 +103,15 @@ static int pwm_sifive_set_enable(struct udevice *dev, uint channel, bool enable)
 {
 	struct pwm_sifive_priv *priv = dev_get_priv(dev);
 	const struct pwm_sifive_regs *regs = &priv->data->regs;
-	u32 val;
 
 	debug("%s: Enable '%s'\n", __func__, dev->name);
 
-	if (enable) {
-		val = readl(priv->base + regs->cfg);
-		val |= PWM_SIFIVE_PWMCFG_EN_ALWAYS;
-		writel(val, priv->base + regs->cfg);
-	} else {
-		writel(0, priv->base + regs->cmp0 + channel *
-		       PWM_SIFIVE_SIZE_PWMCMP);
-	}
+	if (enable)
+		writel(PWM_SIFIVE_CHANNEL_ENABLE_VAL, priv->base +
+		       regs->cmp0 + channel * PWM_SIFIVE_SIZE_PWMCMP);
+	else
+		writel(PWM_SIFIVE_CHANNEL_DISABLE_VAL, priv->base +
+		       regs->cmp0 + channel * PWM_SIFIVE_SIZE_PWMCMP);
 
 	return 0;
 }
-- 
2.31.0

