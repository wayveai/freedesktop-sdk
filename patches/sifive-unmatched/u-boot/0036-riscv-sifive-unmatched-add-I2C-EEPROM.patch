From 10406cb44efd595edd5b1c7f9d5b219642ee2d4f Mon Sep 17 00:00:00 2001
From: David Abdurachmanov <david.abdurachmanov@sifive.com>
Date: Thu, 11 Mar 2021 05:36:41 -0800
Subject: [PATCH 36/50] riscv: sifive: unmatched: add I2C EEPROM

- Print board serial number of the board
- Print PCB revision
- Set Ethernet address
- Set board serial number in U-Boot environment

Signed-off-by: David Abdurachmanov <david.abdurachmanov@sifive.com>
---
 board/sifive/hifive_unmatched_fu740/Makefile  |   1 +
 .../hifive-platform-i2c-eeprom.c              | 536 ++++++++++++++++++
 .../sifive_hifive_unmatched_fu740_defconfig   |   7 +
 .../configs/sifive-hifive-unmatched-fu740.h   |   6 +
 4 files changed, 550 insertions(+)
 create mode 100644 board/sifive/hifive_unmatched_fu740/hifive-platform-i2c-eeprom.c

diff --git a/board/sifive/hifive_unmatched_fu740/Makefile b/board/sifive/hifive_unmatched_fu740/Makefile
index aeab025f32..cd173da495 100644
--- a/board/sifive/hifive_unmatched_fu740/Makefile
+++ b/board/sifive/hifive_unmatched_fu740/Makefile
@@ -3,6 +3,7 @@
 # Copyright (c) 2020 SiFive, Inc
 
 obj-y   += hifive-unmatched-fu740.o
+obj-$(CONFIG_ID_EEPROM) += hifive-platform-i2c-eeprom.o
 
 ifdef CONFIG_SPL_BUILD
 obj-y += spl.o
diff --git a/board/sifive/hifive_unmatched_fu740/hifive-platform-i2c-eeprom.c b/board/sifive/hifive_unmatched_fu740/hifive-platform-i2c-eeprom.c
new file mode 100644
index 0000000000..be7a4fef03
--- /dev/null
+++ b/board/sifive/hifive_unmatched_fu740/hifive-platform-i2c-eeprom.c
@@ -0,0 +1,536 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020-2021 SiFive, Inc.
+ *
+ * Based on board/freescale/common/sys_eeprom.c:
+ * Copyright 2006, 2008-2009, 2011 Freescale Semiconductor
+ * York Sun (yorksun@freescale.com)
+ * Haiying Wang (haiying.wang@freescale.com)
+ * Timur Tabi (timur@freescale.com)
+ */
+
+#include <common.h>
+#include <command.h>
+#include <env.h>
+#include <i2c.h>
+#include <init.h>
+#include <linux/ctype.h>
+#include <linux/delay.h>
+#include <u-boot/crc.h>
+
+#ifndef CONFIG_SYS_EEPROM_BUS_NUM
+#error Requires CONFIG_SYS_EEPROM_BUS_NUM to be defined
+#endif
+
+#define DEBUG
+
+#define FORMAT_VERSION		0x1
+
+/* Options for the manuf_test_status field */
+#define SIFIVE_MANUF_TEST_STATUS_UNKNOWN		0
+#define SIFIVE_MANUF_TEST_STATUS_PASS			1
+#define SIFIVE_MANUF_TEST_STATUS_FAIL			2
+
+/*
+ * BYTES_PER_EEPROM_PAGE: the AT24C02 datasheet says that data can
+ * only be written in page mode, which means 8 bytes at a time
+ */
+#define BYTES_PER_EEPROM_PAGE		8
+
+/*
+ * EEPROM_WRITE_DELAY_MS: the AT24C02 datasheet says it takes up to
+ * 5ms to complete a given write
+ */
+#define EEPROM_WRITE_DELAY_MS		5000
+
+/*
+ * MAGIC_NUMBER_BYTES: number of bytes used by the magic number
+ */
+#define MAGIC_NUMBER_BYTES		4
+
+/*
+ * SERIAL_NUMBER_BYTES: number of bytes used by the board serial
+ * number
+ */
+#define SERIAL_NUMBER_BYTES		16
+
+/*
+ * MAC_ADDR_BYTES: number of bytes used by the Ethernet MAC address
+ */
+#define MAC_ADDR_BYTES			6
+
+
+/**
+ * static eeprom: EEPROM layout for the SiFive platform I2C format
+ */
+struct __attribute__ ((__packed__)) sifive_eeprom {
+	u8 magic[MAGIC_NUMBER_BYTES];
+	u8 format_ver;    
+	u16 product_id;   
+	u8 pcb_revision;  
+	u8 bom_revision;  
+	u8 bom_variant;   
+        u8 serial[SERIAL_NUMBER_BYTES];
+	u8 manuf_test_status;   
+	u8 mac_addr[MAC_ADDR_BYTES];
+	u32 crc;
+};
+
+static struct sifive_eeprom e;
+
+/* Set to 1 if we've read EEPROM into memory */
+static int has_been_read = 0;
+
+static const unsigned char magic[MAGIC_NUMBER_BYTES] = { 0xf1, 0x5e, 0x50,
+	0x45 };
+
+
+static u32 __compute_eeprom_crc(struct sifive_eeprom *eeprom) {
+	return crc32(0, (void *)&eeprom,
+		     sizeof(eeprom) - sizeof(eeprom->crc));
+}
+
+/* Does the magic number match that of a SiFive EEPROM? */
+static int test_magic(struct sifive_eeprom *e)
+{
+	return (memcmp(e->magic, &magic, MAGIC_NUMBER_BYTES) == 0);
+}
+
+/**
+ * show_parsed_eeprom - display the contents of the EEPROM, parsed into fields
+ */
+static void show_parsed_eeprom(void)
+{
+	char board_serial[SERIAL_NUMBER_BYTES + 1] = { 0 };
+
+	printf("SiFive PCB EEPROM format v%u\n", e.format_ver);
+	snprintf(board_serial, sizeof(board_serial), "%s", e.serial);
+	printf("Serial number: %s\n", board_serial);
+	printf("PCB revision: %u\n", (unsigned int)e.pcb_revision);
+
+	/* Show MAC address  */
+	printf("Ethernet MAC address: %02x:%02x:%02x:%02x:%02x:%02x\n",
+	       e.mac_addr[0], e.mac_addr[1], e.mac_addr[2],
+	       e.mac_addr[3], e.mac_addr[4], e.mac_addr[5]);
+}
+
+/**
+ * show_raw_eeprom - display the raw contents of the EEPROM
+ */
+static void show_raw_eeprom(void)
+{
+	int i;
+ 
+	printf("EEPROM dump: (0x%lx bytes)\n", sizeof(e));
+	for (i = 0; i < sizeof(e); i++) {
+		if ((i % 16) == 0)
+			printf("%02X: ", i);
+		printf("%02X ", ((u8 *)&e)[i]);
+		if (((i % 16) == 15) || (i == sizeof(e) - 1))
+			printf("\n");
+	}
+}
+
+/**
+ * show_eeprom - display the contents of the EEPROM
+ */
+static void show_eeprom(void)
+{
+	unsigned int crc;
+
+	if (!test_magic(&e)) {
+		printf("Not a SiFive EEPROM data format - magic bytes don't match\n");
+		show_raw_eeprom();
+		return;
+	};
+
+	show_parsed_eeprom();
+
+	crc = __compute_eeprom_crc(&e);
+	if (crc == le32_to_cpu(e.crc))
+		printf("CRC: %08x\n", le32_to_cpu(e.crc));
+	else
+		printf("CRC: %08x (should be %08x)\n",
+			le32_to_cpu(e.crc), crc);
+
+#ifdef DEBUG
+	show_raw_eeprom();
+#endif
+}
+
+/**
+ * __read_eeprom() - read the EEPROM into memory
+ */
+static int __read_eeprom(struct sifive_eeprom *eeprom)
+{
+	int ret;
+
+	struct udevice *dev;
+	ret = i2c_get_chip_for_busnum(CONFIG_SYS_EEPROM_BUS_NUM,
+				      CONFIG_SYS_I2C_EEPROM_ADDR, 1, &dev);
+	if (!ret)
+		ret = dm_i2c_read(dev, 0, (void *)eeprom,
+				  sizeof(struct sifive_eeprom));
+
+	return ret;
+}
+
+
+/**
+ * read_eeprom() - read the EEPROM into memory, if it hsan't been read already
+ */
+static int read_eeprom(void)
+{
+	int ret;
+
+	if (has_been_read)
+		return 0;
+
+	ret = __read_eeprom(&e);
+
+#ifdef DEBUG
+	show_eeprom();
+#endif
+
+	has_been_read = (ret == 0) ? 1 : 0;
+
+	return ret;
+}
+
+/**
+ *  update_crc() - update the CRC
+ *
+ *  This function should be called after each update to the EEPROM structure,
+ *  to make sure the CRC is always correct.
+ */
+static void update_crc(void)
+{
+	e.crc = cpu_to_le32(__compute_eeprom_crc(&e));
+}
+
+/**
+ * prog_eeprom() - write the EEPROM from memory
+ */
+static int prog_eeprom(void)
+{
+	int ret = 0;
+	int i;
+	void *p;
+
+	if (!test_magic(&e)) {
+		printf("Please read the EEPROM ('read_eeprom') and/or initialize the EEPROM ('initialize') first.\n");
+		return 0;
+	}
+
+	for (i = 0, p = &e; i < sizeof(e);
+	     i += BYTES_PER_EEPROM_PAGE, p += BYTES_PER_EEPROM_PAGE) {
+		struct udevice *dev;
+		ret = i2c_get_chip_for_busnum(CONFIG_SYS_EEPROM_BUS_NUM,
+					      CONFIG_SYS_I2C_EEPROM_ADDR,
+					      CONFIG_SYS_I2C_EEPROM_ADDR_LEN,
+					      &dev);
+		if (!ret)
+			ret = dm_i2c_write(dev, i, p, min((int)(sizeof(e) - i),
+							  BYTES_PER_EEPROM_PAGE));
+		if (ret)
+			break;
+
+		udelay(EEPROM_WRITE_DELAY_MS);
+	}
+
+	if (!ret) {
+		/* Verify the write by reading back the EEPROM and comparing */
+		struct sifive_eeprom e2;
+
+		struct udevice *dev;
+		ret = i2c_get_chip_for_busnum(CONFIG_SYS_EEPROM_BUS_NUM,
+					      CONFIG_SYS_I2C_EEPROM_ADDR,
+					      CONFIG_SYS_I2C_EEPROM_ADDR_LEN,
+					      &dev);
+		if (!ret)
+			ret = dm_i2c_read(dev, 0, (void *)&e2, sizeof(e2));
+		if (!ret && memcmp(&e, &e2, sizeof(e)))
+			ret = -1;
+	}
+
+	if (ret) {
+		printf("Programming failed.\n");
+		has_been_read = 0;
+		return -1;
+	}
+
+	printf("Programming passed.\n");
+	return 0;
+}
+
+/**
+ * set_mac_address() - stores a MAC address into the local EEPROM copy
+ *
+ * This function takes a pointer to MAC address string
+ * (i.e."XX:XX:XX:XX:XX:XX", where "XX" is a two-digit hex number),
+ * stores it in the MAC address field of the EEPROM local copy, and
+ * updates the local copy of the CRC.
+ */
+static void set_mac_address(char *string)
+{
+	unsigned int i;
+
+	/* XXX Validate that the MAC address uses the SiFive OUI */
+	for (i = 0; *string && (i < MAC_ADDR_BYTES); i++) {
+		e.mac_addr[i] = simple_strtoul(string, &string, 16);
+		if (*string == ':')
+			string++;
+	}
+
+	update_crc();
+}
+
+/**
+ * set_manuf_test_status() - stores a test status byte into the in-memory copy
+ *
+ * Takes a pointer to a manufacturing test status string ("unknown",
+ * "pass", "fail") and stores the corresponding numeric ID to the
+ * manuf_test_status field of the EEPROM local copy, and updates the
+ * CRC of the local copy.
+ */
+static void set_manuf_test_status(char *string)
+{
+	if (!strcasecmp(string, "unknown")) {
+		e.manuf_test_status = SIFIVE_MANUF_TEST_STATUS_UNKNOWN;
+	} else if (!strcasecmp(string, "pass")) {
+		e.manuf_test_status = SIFIVE_MANUF_TEST_STATUS_PASS;
+	} else if (!strcasecmp(string, "fail")) {
+		e.manuf_test_status = SIFIVE_MANUF_TEST_STATUS_FAIL;
+	} else {
+		printf("Usage: mac manuf_test_status (unknown|pass|fail)\n");
+		return;
+	}
+
+	update_crc();
+}
+
+/**
+ * set_pcb_revision() - stores a SiFive PCB revision into the local EEPROM copy
+ *
+ * Takes a pointer to a string representing the numeric PCB revision in
+ * decimal ("0" - "255"), stores it in the pcb_revision field of the
+ * EEPROM local copy, and updates the CRC of the local copy.
+ */
+static void set_pcb_revision(char *string)
+{
+	unsigned long p;
+
+	p = simple_strtoul(string, &string, 10);
+	if (p > U8_MAX) {
+		printf("%s must not be greater than %d\n", "PCB revision",
+		       U8_MAX);
+		return;
+	}
+
+	e.pcb_revision = p;
+
+	update_crc();
+}
+
+/**
+ * set_bom_revision() - stores a SiFive BOM revision into the local EEPROM copy
+ *
+ * Takes a pointer to a uppercase ASCII character representing the BOM
+ * revision ("A" - "Z"), stores it in the bom_revision field of the
+ * EEPROM local copy, and updates the CRC of the local copy.
+ */
+static void set_bom_revision(char *string)
+{
+	if (string[0] < 'A' || string[0] > 'Z') {
+		printf("BOM revision must be an uppercase letter between A and Z\n");
+		return;
+	}
+
+	e.bom_revision = string[0];
+
+	update_crc();
+}
+
+/**
+ * set_bom_variant() - stores a SiFive BOM variant into the local EEPROM copy
+ *
+ * Takes a pointer to a string representing the numeric BOM variant in
+ * decimal ("0" - "255"), stores it in the bom_variant field of the
+ * EEPROM local copy, and updates the CRC of the local copy.
+ */
+static void set_bom_variant(char *string)
+{
+	unsigned long p;
+
+	p = simple_strtoul(string, &string, 10);
+	if (p > U8_MAX) {
+		printf("%s must not be greater than %d\n", "BOM variant",
+		       U8_MAX);
+		return;
+	}
+
+	e.bom_variant = p;
+
+	update_crc();
+}
+
+/**
+ * set_product_id() - stores a SiFive product ID into the local EEPROM copy
+ *
+ * Takes a pointer to a string representing the numeric product ID  in
+ * decimal ("0" - "65535"), stores it in the product ID field of the
+ * EEPROM local copy, and updates the CRC of the local copy.
+ */
+static void set_product_id(char *string)
+{
+	unsigned long p;
+
+	p = simple_strtoul(string, &string, 10);
+	if (p > U16_MAX) {
+		printf("%s must not be greater than %d\n", "Product ID",
+		       U16_MAX);
+		return;
+	}
+
+	e.product_id = p;
+
+	update_crc();
+}
+
+/**
+ * init_local_copy() - initialize the in-memory EEPROM copy 
+ *
+ * Initialize the in-memory EEPROM copy with the magic number.  Must
+ * be done when preparing to initialize a blank EEPROM, or overwrite
+ * one with a corrupted magic number.
+ */
+static void init_local_copy(void)
+{
+	memset(&e, 0, sizeof(e));
+	memcpy(e.magic, magic, sizeof(e.magic));
+	e.format_ver = FORMAT_VERSION;
+	update_crc();
+}
+
+/**
+ * set_serial_number() - set the PCB serial number in the in-memory copy
+ *
+ * Set the board serial number in the in-memory EEPROM copy from the supplied
+ * string argument, and update the CRC.
+ */
+static void set_serial_number(char *string)
+{
+	memset(e.serial, 0, sizeof(e.serial));
+	strncpy((char *)e.serial, string, sizeof(e.serial) - 1);
+	update_crc();
+}
+
+
+/* XXX Add command table structure */
+
+int do_mac(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	char *cmd;
+
+	if (argc == 1) {
+		show_eeprom();
+		return 0;
+	}
+
+	if (argc > 3)
+		return cmd_usage(cmdtp);
+
+	cmd = argv[1];
+
+	/* Commands with no argument */
+	if (!strcmp(cmd, "read_eeprom")) {
+		read_eeprom();
+		return 0;
+	} else if (!strcmp(cmd, "initialize")) {
+		init_local_copy();
+		return 0;
+	} else if (!strcmp(cmd, "write_eeprom")) {
+		prog_eeprom();
+		return 0;
+	}
+
+	if (argc != 3)
+		return cmd_usage(cmdtp);
+
+	if (!test_magic(&e)) {
+		printf("Please read the EEPROM ('read_eeprom') and/or initialize the EEPROM ('initialize') first.\n");
+		return 0;
+	}
+
+	if (!strcmp(cmd, "serial_number")) {
+		set_serial_number(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "manuf_test_status")) {
+		set_manuf_test_status(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "mac_address")) {
+		set_mac_address(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "pcb_revision")) {
+		set_pcb_revision(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "bom_variant")) {
+		set_bom_variant(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "bom_revision")) {
+		set_bom_revision(argv[2]);
+		return 0;
+	} else if (!strcmp(cmd, "product_id")) {
+		set_product_id(argv[2]);
+		return 0;
+	}
+
+	return cmd_usage(cmdtp);
+}
+
+/**
+ * mac_read_from_eeprom() - read the MAC address from EEPROM
+ *
+ * This function reads the MAC address from EEPROM and sets the
+ * appropriate environment variables for each one read.
+ *
+ * The environment variables are only set if they haven't been set already.
+ * This ensures that any user-saved variables are never overwritten.
+ *
+ * This function must be called after relocation.
+ */
+int mac_read_from_eeprom(void)
+{
+	u32 crc;
+	char board_serial[SERIAL_NUMBER_BYTES + 1] = { 0 };
+
+	puts("EEPROM: ");
+
+	if (read_eeprom()) {
+		printf("Read failed.\n");
+		return 0;
+	}
+
+	if (!test_magic(&e)) {
+		printf("Invalid ID (%02x %02x %02x %02x)\n",
+		       e.magic[0], e.magic[1], e.magic[2], e.magic[3]);
+		return 0;
+	}
+
+	crc = __compute_eeprom_crc(&e);
+	if (crc != le32_to_cpu(e.crc)) {
+		printf("CRC mismatch (%08x != %08x)\n", crc,
+		       le32_to_cpu(e.crc));
+	}
+
+	eth_env_set_enetaddr("ethaddr", e.mac_addr);
+
+	if (!env_get("serial#")) {
+		snprintf(board_serial, sizeof(board_serial), "%s", e.serial);
+		env_set("serial#", board_serial);
+	}
+
+	printf("found SiFive v%u\n", le32_to_cpu(e.format_ver));
+
+	return 0;
+}
diff --git a/configs/sifive_hifive_unmatched_fu740_defconfig b/configs/sifive_hifive_unmatched_fu740_defconfig
index 5a1b8b0ff1..a8531774bb 100644
--- a/configs/sifive_hifive_unmatched_fu740_defconfig
+++ b/configs/sifive_hifive_unmatched_fu740_defconfig
@@ -15,6 +15,7 @@ CONFIG_FIT=y
 CONFIG_SPL_LOAD_FIT_ADDRESS=0x84000000
 CONFIG_DISPLAY_CPUINFO=y
 CONFIG_DISPLAY_BOARDINFO=y
+CONFIG_DISPLAY_BOARDINFO_LATE=y
 CONFIG_SPL_SEPARATE_BSS=y
 CONFIG_SPL_DM_RESET=y
 CONFIG_SPL_YMODEM_SUPPORT=y
@@ -45,3 +46,9 @@ CONFIG_CMD_NVME=y
 CONFIG_SYS_USB_EVENT_POLL=y
 CONFIG_CMD_GPT=y
 CONFIG_CMD_GPT_RENAME=y
+CONFIG_CMD_EEPROM=y
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_I2C=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_OCORES=y
+CONFIG_CLK_SIFIVE_PRCI=y
diff --git a/include/configs/sifive-hifive-unmatched-fu740.h b/include/configs/sifive-hifive-unmatched-fu740.h
index f915000054..deb34142fc 100644
--- a/include/configs/sifive-hifive-unmatched-fu740.h
+++ b/include/configs/sifive-hifive-unmatched-fu740.h
@@ -43,6 +43,12 @@
 #define CONFIG_USB_OHCI_NEW
 #define CONFIG_SYS_USB_OHCI_MAX_ROOT_PORTS     4
 
+#define CONFIG_SYS_EEPROM_BUS_NUM		0
+#define CONFIG_SYS_I2C_EEPROM_ADDR		0x54
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN		0x1
+
+#define CONFIG_ID_EEPROM
+
 /* Environment options */
 
 #ifndef CONFIG_SPL_BUILD
-- 
2.31.0

