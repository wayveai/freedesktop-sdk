From e9c316360f2fc6fa1ec1f00f6c1500daa353af78 Mon Sep 17 00:00:00 2001
From: Mathieu Duponchelle <mathieu@centricular.com>
Date: Thu, 25 Jun 2020 23:51:06 +0200
Subject: [PATCH] gi: associate klass with its chilren symbols

This makes the CheckSinceMarkers extension logic work
---
 hotdoc/extensions/gi/formatter.py    |  4 +++-
 hotdoc/extensions/gi/gi_extension.py | 29 ++++++++++++++++++++++------
 hotdoc/extensions/gi/symbols.py      | 22 ++++++++++++++++++++-
 hotdoc/extensions/gi/utils.py        | 21 +++++++++++++-------
 4 files changed, 61 insertions(+), 15 deletions(-)

diff --git a/hotdoc/extensions/gi/formatter.py b/hotdoc/extensions/gi/formatter.py
index dfc42cb..4432586 100644
--- a/hotdoc/extensions/gi/formatter.py
+++ b/hotdoc/extensions/gi/formatter.py
@@ -26,7 +26,7 @@
 from hotdoc.core.symbols import *
 import lxml.etree
 from hotdoc.extensions.gi.node_cache import ALL_GI_TYPES, is_introspectable
-from hotdoc.extensions.gi.symbols import GIClassSymbol, GIStructSymbol, FundamentalSymbol
+from hotdoc.extensions.gi.symbols import GIClassSymbol, GIInterfaceSymbol, GIStructSymbol, FundamentalSymbol
 from hotdoc.extensions.gi.annotation_parser import GIAnnotationParser
 
 
@@ -44,10 +44,12 @@ def __init__(self, gi_extension):
                 {
                     GIClassSymbol: self._format_class_symbol,
                     GIStructSymbol: self._format_class_symbol,
+                    GIInterfaceSymbol: self._format_interface_symbol,
                     FundamentalSymbol: self._format_fundamental_symbol,
                 })
         self._ordering.insert(self._ordering.index(ClassSymbol) + 1, GIClassSymbol)
         self._ordering.insert(self._ordering.index(GIClassSymbol) + 1, GIStructSymbol)
+        self._ordering.insert(self._ordering.index(InterfaceSymbol) + 1, GIInterfaceSymbol)
         self._ordering.insert(0, FundamentalSymbol)
         self.__annotation_parser = GIAnnotationParser()
 
diff --git a/hotdoc/extensions/gi/gi_extension.py b/hotdoc/extensions/gi/gi_extension.py
index d70539b..7d3b062 100644
--- a/hotdoc/extensions/gi/gi_extension.py
+++ b/hotdoc/extensions/gi/gi_extension.py
@@ -49,10 +49,10 @@
     SMART_FILTERS, get_klass_parents,
     get_klass_children, cache_nodes, type_description_from_node,
     is_introspectable, is_callback_type)
-from hotdoc.extensions.gi.symbols import GIClassSymbol, GIStructSymbol, FundamentalSymbol
+from hotdoc.extensions.gi.symbols import GIClassSymbol, GIInterfaceSymbol, GIStructSymbol, FundamentalSymbol
 from hotdoc.extensions.devhelp.devhelp_extension import TYPE_MAP
 
-TYPE_MAP.update({GIClassSymbol: 'class', GIStructSymbol: 'struct'})
+TYPE_MAP.update({GIClassSymbol: 'class', GIInterfaceSymbol: 'interface', GIStructSymbol: 'struct'})
 
 
 DESCRIPTION =\
@@ -631,6 +631,10 @@ def __create_signal_symbol(self, node, parent_name):
             parent_name=parent_name)
 
         if res:
+            klass = self.app.database.get_symbol(klass_name)
+            assert(klass)
+            klass.signals.append(res)
+
             flags = []
 
             when = node.attrib.get('when')
@@ -686,6 +690,10 @@ def __create_property_symbol(self, node, parent_name):
                                         parent_name=parent_name)
 
         if res:
+            klass = self.app.database.get_symbol(klass_name)
+            assert(klass)
+            klass.properties.append(res)
+
             extra_content = self.formatter._format_flags(flags)
             res.extension_contents['Flags'] = extra_content
 
@@ -721,6 +729,10 @@ def __create_vfunc_symbol(self, node, parent_name):
                                            aliases=[unique_name.replace('::', '.')])
 
         if symbol:
+            klass = self.app.database.get_symbol(klass_name)
+            assert(klass)
+            klass.vfuncs.append(symbol)
+
             self.__sort_parameters(symbol, retval, parameters)
 
         return symbol
@@ -856,14 +868,14 @@ def __create_struct_symbol(self, node, struct_name, filename,
             return res
 
     def __create_interface_symbol(self, node, unique_name, filename):
-        return self.create_symbol(InterfaceSymbol, node,
+        return self.create_symbol(GIInterfaceSymbol, node,
                                          display_name=unique_name,
                                          unique_name=unique_name,
                                          parent_name=unique_name,
                                          filename=filename)
 
     def __create_function_symbol(self, node, parent_name):
-        name = get_symbol_names(node)[0]
+        unique_name, name, klass_name = get_symbol_names(node)
 
         gi_params, retval = self.__create_parameters_and_retval(node)
 
@@ -881,13 +893,18 @@ def __create_function_symbol(self, node, parent_name):
                                          parameters=gi_params,
                                          return_value=retval,
                                          display_name=name,
-                                         unique_name=name,
+                                         unique_name=unique_name,
                                          throws='throws' in node.attrib,
                                          filename=self.__get_symbol_filename(
                                              name, node),
                                          parent_name=parent_name)
 
         if func:
+            if klass_name is not None:
+                klass = self.app.database.get_symbol(klass_name)
+                assert(klass)
+                klass.methods.append(func)
+
             self.__sort_parameters(func, func.return_value, func.parameters)
 
         return func
@@ -924,7 +941,7 @@ def __scan_node(self, node, parent_name=None):
         elif node.tag == core_ns('record'):
             self.__create_structure(GIStructSymbol, node, gi_name)
         elif node.tag == core_ns('interface'):
-            self.__create_structure(InterfaceSymbol, node, gi_name)
+            self.__create_structure(GIInterfaceSymbol, node, gi_name)
         elif node.tag == core_ns('enumeration'):
             self.__create_enum_symbol(node)
         elif node.tag == core_ns('bitfield'):
diff --git a/hotdoc/extensions/gi/symbols.py b/hotdoc/extensions/gi/symbols.py
index 5639747..0c6bfbb 100644
--- a/hotdoc/extensions/gi/symbols.py
+++ b/hotdoc/extensions/gi/symbols.py
@@ -18,14 +18,31 @@
 from hotdoc.core.symbols import *
 from hotdoc.extensions.devhelp.devhelp_extension import TYPE_MAP
 
+
 class GIClassSymbol(ClassSymbol):
     def __init__(self, **kwargs):
         self.class_struct_symbol = None
         self.interfaces = []
+        self.properties = []
+        self.methods = []
+        self.signals = []
+        self.vfuncs = []
         ClassSymbol.__init__(self, **kwargs)
 
     def get_children_symbols(self):
-        return [self.class_struct_symbol] + super().get_children_symbols() + self.interfaces
+        return [self.class_struct_symbol] + self.interfaces + self.properties + self.methods + self.signals + self.vfuncs + super().get_children_symbols()
+
+
+class GIInterfaceSymbol(InterfaceSymbol):
+    def __init__(self, **kwargs):
+        self.properties = []
+        self.methods = []
+        self.signals = []
+        self.vfuncs = []
+        InterfaceSymbol.__init__(self, **kwargs)
+
+    def get_children_symbols(self):
+        return self.properties + self.methods + self.signals + self.vfuncs + super().get_children_symbols()
 
 
 class GIStructSymbol(ClassSymbol):
@@ -34,8 +51,11 @@ class GIStructSymbol(ClassSymbol):
     """
     def __init__(self, **kwargs):
         self.class_struct_symbol = None
+        self.methods = []
         ClassSymbol.__init__(self, **kwargs)
 
+    def get_children_symbols(self):
+        return [self.class_struct_symbol] + self.methods + super().get_children_symbols()
 
 class FundamentalSymbol(Symbol):
     __tablename__ = 'fundamentals'
diff --git a/hotdoc/extensions/gi/utils.py b/hotdoc/extensions/gi/utils.py
index 27dac38..a0827ee 100644
--- a/hotdoc/extensions/gi/utils.py
+++ b/hotdoc/extensions/gi/utils.py
@@ -75,9 +75,18 @@ def get_symbol_names(node):
     elif node.tag in (core_ns('interface')):
         _ = get_klass_name (node)
         return _, _, _
-    elif node.tag in (core_ns('function'), core_ns('method'), core_ns('constructor')):
+    elif node.tag == core_ns('function'):
         _ = get_function_name(node)
-        return _, _, _
+        return _, _, None
+    elif node.tag in (core_ns('method'), core_ns('constructor')):
+        unique_name = get_function_name(node)
+        parent = node.getparent()
+        if glib_ns('is-gtype-struct-for') in parent.attrib:
+            ns = parent.getparent()
+            parent = ns.xpath(
+                    './*[@name="%s"]' % parent.attrib[glib_ns('is-gtype-struct-for')])[0]
+        parent_name = get_klass_name(parent)
+        return unique_name, unique_name, parent_name
     elif node.tag == core_ns('virtual-method'):
         klass_node = node.getparent()
         ns = klass_node.getparent()
@@ -87,7 +96,7 @@ def get_symbol_names(node):
         parent_name = get_structure_name(klass_structure_node)
         name = node.attrib['name']
         unique_name = '%s::%s' % (parent_name, name)
-        return unique_name, name, unique_name
+        return unique_name, name, get_klass_name (klass_node)
     elif node.tag == core_ns('field'):
         structure_node = node.getparent()
         parent_name = get_structure_name(structure_node)
@@ -96,16 +105,14 @@ def get_symbol_names(node):
         return unique_name, name, unique_name
     elif node.tag == core_ns('property'):
         parent_name = get_klass_name(node.getparent())
-        klass_name = '%s::%s' % (parent_name, parent_name)
         name = node.attrib['name']
         unique_name = '%s:%s' % (parent_name, name)
-        return unique_name, name, klass_name
+        return unique_name, name, parent_name
     elif node.tag == glib_ns('signal'):
         parent_name = get_klass_name(node.getparent())
-        klass_name = '%s::%s' % (parent_name, parent_name)
         name = node.attrib['name']
         unique_name = '%s::%s' % (parent_name, name)
-        return unique_name, name, klass_name
+        return unique_name, name, parent_name
     elif node.tag == core_ns('alias'):
         _ = node.attrib.get(c_ns('type'))
         return _, _, _
